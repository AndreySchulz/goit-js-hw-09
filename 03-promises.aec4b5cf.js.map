{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAmCA,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACLN,EACFI,EAAQ,CAAEN,WAAUC,UAEpBM,EAAO,CAAEP,WAAUC,YAEpBA,OA3CM,CACXQ,QAASC,SAASC,cAAc,SAChCC,OAAQF,SAASC,cAAc,YAG5BF,QAAQI,iBAAiB,UAE9B,SAAyBC,GACvBC,QAAQC,IAAI,GACZF,EAAMG,iBAWN,IAVA,IAEuBC,EAAnBJ,EAAMK,cADRC,SAAYC,EAAKH,EAALjB,MAAOqB,EAAIJ,EAAJI,KAAMC,EAAML,EAANK,OAGvBC,EAAcC,OAAOJ,EAAMK,OAE3BC,EAAaF,OAAOH,EAAKI,OAEzBE,EAAeH,OAAOF,EAAOG,OAExBG,EAAI,EAAGA,GAAKD,EAAcC,GAAK,EACtC9B,EAAc8B,EAAGL,GACdM,MAAK,SAAAC,G,IAAG/B,EAAQ+B,EAAR/B,SAAUC,EAAK8B,EAAL9B,MACjBJ,EAAAmC,OAAOC,QAAQ,uBAAwCC,OAAflC,EAAS,QAAYkC,OAANjC,EAAM,OAC3Dc,QAAMC,IAAI,uBAAwCkB,OAAflC,EAAS,QAAYkC,OAANjC,EAAM,UAE3DkC,OAAM,SAAAJ,G,IAAG/B,EAAQ+B,EAAR/B,SAAUC,EAAK8B,EAAL9B,MAClBJ,EAAAmC,OAAOI,QAAQ,sBAAuCF,OAAflC,EAAS,QAAYkC,OAANjC,EAAM,OAC1Dc,QAAMC,IAAI,sBAAqCkB,OAAflC,EAAS,QAAYkC,OAANjC,EAAM,UAE3DuB,GAAeG,K","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\nconst refs = {\n  formRef: document.querySelector('.form'),\n  btnRef: document.querySelector('button'),\n};\n\nrefs.formRef.addEventListener('submit', onHanddleSubmit);\n\nfunction onHanddleSubmit(event) {\n  console.log(1);\n  event.preventDefault();\n  const {\n    elements: { delay, step, amount },\n  } = event.currentTarget;\n\n  let dalayHandle = Number(delay.value);\n\n  let stepHandle = Number(step.value);\n\n  let amountHandle = Number(amount.value);\n\n  for (let i = 1; i <= amountHandle; i += 1) {\n    createPromise(i, dalayHandle)\n      .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`);\n        console.log(`✅ Fulfilled promise ${position} in ${delay}ms`);\n      })\n      .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`);\n        console.log(`❌ Rejected promise ${position} in ${delay}ms`);\n      });\n    dalayHandle += stepHandle;\n  }\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({ position, delay });\n      } else {\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","resolve","reject","setTimeout","formRef","document","querySelector","btnRef","addEventListener","event","console","log","preventDefault","_elements","currentTarget","elements","delay1","step","amount","dalayHandle","Number","value","stepHandle","amountHandle","i","then","param","Notify","success","concat","catch","failure"],"version":3,"file":"03-promises.aec4b5cf.js.map"}